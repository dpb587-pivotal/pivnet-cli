// This file was generated by counterfeiter
package logoutfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/commands/logout"
)

type FakeRCHandler struct {
	SaveProfileStub        func(profileName string, apiToken string, host string) error
	saveProfileMutex       sync.RWMutex
	saveProfileArgsForCall []struct {
		profileName string
		apiToken    string
		host        string
	}
	saveProfileReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRCHandler) SaveProfile(profileName string, apiToken string, host string) error {
	fake.saveProfileMutex.Lock()
	fake.saveProfileArgsForCall = append(fake.saveProfileArgsForCall, struct {
		profileName string
		apiToken    string
		host        string
	}{profileName, apiToken, host})
	fake.recordInvocation("SaveProfile", []interface{}{profileName, apiToken, host})
	fake.saveProfileMutex.Unlock()
	if fake.SaveProfileStub != nil {
		return fake.SaveProfileStub(profileName, apiToken, host)
	} else {
		return fake.saveProfileReturns.result1
	}
}

func (fake *FakeRCHandler) SaveProfileCallCount() int {
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	return len(fake.saveProfileArgsForCall)
}

func (fake *FakeRCHandler) SaveProfileArgsForCall(i int) (string, string, string) {
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	return fake.saveProfileArgsForCall[i].profileName, fake.saveProfileArgsForCall[i].apiToken, fake.saveProfileArgsForCall[i].host
}

func (fake *FakeRCHandler) SaveProfileReturns(result1 error) {
	fake.SaveProfileStub = nil
	fake.saveProfileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRCHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRCHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logout.RCHandler = new(FakeRCHandler)
